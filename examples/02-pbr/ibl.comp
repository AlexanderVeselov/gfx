/****************************************************************************
MIT License

Copyright (c) 2021 Guillaume Boiss√©

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
****************************************************************************/
#define PI 3.141592653589793238463f

uint     g_FaceIndex;
float4x4 g_ViewProjectionInverse;

TextureCube g_Cubemap;
Texture2D   g_EnvironmentBuffer;

RWTexture2DArray<float4> g_InCubemap;
RWTexture2DArray<float4> g_OutCubemap;
RWTexture2DArray<float4> g_IrradianceBuffer;

SamplerState g_LinearSampler;

float2 SampleSphericalMap(in float3 rd)
{
    return float2(atan2(rd.z, rd.x) / (2.0f * PI) + 0.5f, 1.0f - acos(rd.y) / PI);
}

[numthreads(8, 8, 1)]
void DrawCubemap(in uint2 did : SV_DispatchThreadID)
{
    uint3 dimensions;
    g_OutCubemap.GetDimensions(dimensions.x, dimensions.y, dimensions.z);

    float2 uv  = did / float2(dimensions.xy);
    float2 ndc = 2.0f * uv - 1.0f;

    float4 world = mul(g_ViewProjectionInverse, float4(ndc, 1.0f, 1.0f));
    world /= world.w;   // perspective divide

    uv = SampleSphericalMap(normalize(world.xyz));

    float3 color = g_EnvironmentBuffer.SampleLevel(g_LinearSampler, uv, 0.0f).xyz;

    g_OutCubemap[int3(did, g_FaceIndex)] = float4(pow(color, 2.2f), 1.0f);
}

[numthreads(8, 8, 1)]
void BlurCubemap(in uint3 did : SV_DispatchThreadID)
{
    uint3 dimensions;
    g_InCubemap.GetDimensions(dimensions.x, dimensions.y, dimensions.z);

    if(any(did.xy >= max(dimensions.xy >> 1, 1)))
    {
        return; // out of bounds
    }

    float4 result       = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float  sample_count = 0.0f;

    for(uint y = 0; y < 2; ++y)
    {
        for(uint x = 0; x < 2; ++x)
        {
            uint2 pix = (did.xy << 1) + uint2(x, y);

            if(any(pix >= dimensions.xy))
            {
                break;  // out of bounds
            }

            result += g_InCubemap[int3(pix, did.z)];

            sample_count += 1.0f;
        }
    }

    g_OutCubemap[did] = result / sample_count;
}

[numthreads(8, 8, 1)]
void DrawIrradiance(in uint2 did : SV_DispatchThreadID)
{
    uint3 dimensions;
    g_IrradianceBuffer.GetDimensions(dimensions.x, dimensions.y, dimensions.z);

    float2 uv  = did / float2(dimensions.xy);
    float2 ndc = 2.0f * uv - 1.0f;

    float4 world = mul(g_ViewProjectionInverse, float4(ndc, 1.0f, 1.0f));
    world /= world.w;   // perspective divide

    float3 forward = normalize(world.xyz);
    float3 up = float3(0.0f, 1.0f, 0.0f);
    float3 right = cross(up, forward);
    up = cross(forward, right);

    float sample_count = 0.0f;
    float sample_delta = 0.025f;

    float3 irradiance = float3(0.0f, 0.0f, 0.0f);

    for(float phi = 0.0f; phi < 2.0f * PI; phi += sample_delta)
    {
        for(float theta = 0.0f; theta < 0.5f * PI; theta += sample_delta)
        {
            // Spherical to cartesian (in tangent space)
            float3 tangent_sample = float3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // Tangent space to world
            float3 sample_vector = tangent_sample.x * right + tangent_sample.y * up + tangent_sample.z * forward;
            // Accumulate irradiance contribution
            irradiance += g_Cubemap.SampleLevel(g_LinearSampler, sample_vector, 0.0f).xyz * cos(theta) * sin(theta);
            // Increment sample count
            sample_count += 1.0f;
        }
    }

    g_IrradianceBuffer[int3(did, g_FaceIndex)] = float4(PI * irradiance / sample_count, 1.0f);
}
